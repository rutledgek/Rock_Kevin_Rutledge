<template>
    <div class="roster-filter">
        <RockFormField v-bind="standardFieldProps" name="rosterFilter" :modelValue="internalValue">
            <div class="btn-toolbar">
                <div class="btn-group">
                    <RockButton btnSize="lg" :btnType="getBtnType(noFilterOrHasAttendedFilter.hasFilter(NoFilter))" @click="setNoFilterOrHasAttendedFilter(NoFilter)"><i class="fa fa-th" /></RockButton>
                    <RockButton btnSize="lg" :btnType="getBtnType(noFilterOrHasAttendedFilter.hasFilter(HasAttendedFilter))" @click="setNoFilterOrHasAttendedFilter(HasAttendedFilter)">{{ hasAttendedCount }}</RockButton>
                </div>

                <div class="btn-group">
                    <RockButton v-for="lastNameInitial in lastNameInitials"
                        btnSize="lg"
                        :btnType="getBtnType(lastNameStartsWithFilters.hasFilter(createLastNameStartsWithFilter(lastNameInitial)))"
                        @click="addOrRemoveLastNameStartsWithFilter(createLastNameStartsWithFilter(lastNameInitial))">{{ lastNameInitial }}</RockButton>
                </div>
            </div>
        </RockFormField>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import { IAggregateRosterFilter, IRosterFilter, NoFilter, createEveryFilter, createLastNameStartsWithFilter, createSomeFilter, HasAttendedFilter } from "./filterType";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockFormField from "@Obsidian/Controls/rockFormField";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { LiteralUnion } from "@Obsidian/Types/Utility/support";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";

    const props = defineProps({

        modelValue: {
            type: Object as PropType<IRosterFilter>,
            required: true
        },

        defaultFilter: {
            type: Object as PropType<IRosterFilter>,
            default: NoFilter
        },

        hasAttendedCount: {
            type: Number as PropType<number>,
            required: true
        },

        lastNameInitials: {
            type: Array as PropType<string[]>,
            required: true
        },

        unselectedBtnType: {
            type: String as PropType<LiteralUnion<BtnType>>,
            default: BtnType.Default
        },

        selectedBtnType: {
            type: String as PropType<LiteralUnion<BtnType>>,
            default: BtnType.Primary
        },

        isMultiselect: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: IRosterFilter): void
    }>();

    const internalValue = computed({
        get(): IRosterFilter {
            return props.modelValue;
        },
        set(newValue: IRosterFilter) {
            emit("update:modelValue", newValue);
        }
    });

    // Initialize the NoFilter or HasAttendedFilter based on the initial filter(s).
    const noFilterOrHasAttendedFilter = ref<typeof HasAttendedFilter | typeof NoFilter>(props.modelValue.hasFilter(HasAttendedFilter) ? HasAttendedFilter : NoFilter);

    // No need to initialize the "last name starts with" filter(s) yet.
    const lastNameStartsWithFilters = ref<IAggregateRosterFilter>(createSomeFilter());

    function getBtnType(isSelected: boolean): LiteralUnion<BtnType> {
        if (isSelected) {
            return props.selectedBtnType;
        }
        else {
            return props.unselectedBtnType;
        }
    }

    function setNoFilterOrHasAttendedFilter(rosterFilter: IRosterFilter): void {
        noFilterOrHasAttendedFilter.value = rosterFilter;

        notifyFiltersUpdated();
    }

    function addOrRemoveLastNameStartsWithFilter(rosterFilter: IRosterFilter): void {
        // If the filter is currently selected then remove it.
        const hasNoLastNameStartsWithFilters = !lastNameStartsWithFilters.value.filters.length;

        if (hasNoLastNameStartsWithFilters) {
            lastNameStartsWithFilters.value.filters = [rosterFilter];
        }
        else {
            // At least one filter is selected.
            const isFilterSelected = lastNameStartsWithFilters.value.hasFilter(rosterFilter);

            if (!props.isMultiselect) {
                if (isFilterSelected) {
                    // Deselect the filter.
                    lastNameStartsWithFilters.value.filters = [];
                }
                else {
                    // Select the filter.
                    lastNameStartsWithFilters.value.filters = [rosterFilter];
                }
            }
            else {
                if (isFilterSelected) {
                    // Exclude the filter.
                    lastNameStartsWithFilters.value.filters = lastNameStartsWithFilters.value.filters.filter(f => !f.isFilter(rosterFilter));
                }
                else {
                    // Include the filter.
                    lastNameStartsWithFilters.value.filters.push(rosterFilter);
                }
            }
        }

        notifyFiltersUpdated();
    }

    function notifyFiltersUpdated(): void {
        if (!lastNameStartsWithFilters.value.filters.length) {
            internalValue.value = noFilterOrHasAttendedFilter.value;
        }
        else {
            internalValue.value = createEveryFilter(noFilterOrHasAttendedFilter.value, lastNameStartsWithFilters.value);
        }
    }

    const standardFieldProps = useStandardRockFormFieldProps(props);
</script>