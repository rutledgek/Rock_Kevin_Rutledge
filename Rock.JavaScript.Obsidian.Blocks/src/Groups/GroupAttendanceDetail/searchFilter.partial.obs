<template>
    <TextBox v-model="searchText" placeholder="Search" />
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { createFilter, IRosterFilter, NoFilter } from "./filterType";
    import TextBox from "@Obsidian/Controls/textBox";
    import { GroupAttendanceDetailRosterAttendeeBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailRosterAttendeeBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<IRosterFilter>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: IRosterFilter): void
    }>();

    //#region Values

    const isRegex: RegExp = /\/(.+)\/(.*)/;
    let privateSearchText = ref<string>("");
    const searchText = computed<string>({
        get() {
            return privateSearchText.value;
        },
        set(newValue: string) {
            privateSearchText.value = newValue;

            let filter: IRosterFilter = NoFilter;

            if (newValue) {
                const match = newValue.match(isRegex);
                if (match && match.length) {
                    try {
                        const regex = new RegExp(match[1], match[2]);
                        if (regex) {
                            filter = createNameMatchesRegexFilter(regex);
                        }
                    }
                    catch {
                        // `newValue` is not a valid regex string so try a simple text match.
                        filter = createNameContainsFilter(newValue);
                    }
                }
                else {
                    filter = createNameContainsFilter(newValue);
                }
            }

            return emit("update:modelValue", filter);
        }
    });

    //#endregion

    //#region Functions

    function createNameContainsFilter(text: string): IRosterFilter {
        return createFilter((attendee: GroupAttendanceDetailRosterAttendeeBag) => {
            return !!attendee.fullName && attendee.fullName.toLocaleLowerCase().indexOf(text.toLocaleLowerCase()) >= 0;
        });
    }

    function createNameMatchesRegexFilter(regex: RegExp): IRosterFilter {
        return createFilter((attendance: GroupAttendanceDetailRosterAttendeeBag) => {
            return !!attendance.fullName && regex.test(attendance.fullName);
        });
    }

    //#endregion
</script>