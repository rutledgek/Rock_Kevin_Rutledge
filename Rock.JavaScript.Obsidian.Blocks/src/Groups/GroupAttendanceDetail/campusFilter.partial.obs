<template>
    <CampusPicker
        v-model="campusPickerValue"
        blankValue="All Campuses"
        :includeInactive="true"
        :multiple="false"
        :showBlankItem="true" />
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { createFilter, IRosterFilter, NoFilter } from "./filterType";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<IRosterFilter>,
            required: true
        },

        campusGuid: {
            type: String as PropType<string | null | undefined>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: IRosterFilter): void,
        (e: "update:campusGuid", value: string | null | undefined): void
    }>();

    //#region Values

    const campusPickerValue = ref<ListItemBag | null>(props.campusGuid ? ({ text: null, value: props.campusGuid }) : null);

    //#endregion

    //#region Watchers

    // Update the selected Campus GUID and filter whenever the Campus picker changes.
    watch(campusPickerValue, () => {
        let filter: IRosterFilter = NoFilter;
        const campusGuid = campusPickerValue.value?.value;

        if (campusGuid) {
            filter = createFilter((attendee) => {
                return attendee.campusGuid === campusGuid;
            });
        }

        emit("update:campusGuid", campusGuid);
        emit("update:modelValue", filter);
    });

    //#endregion
</script>