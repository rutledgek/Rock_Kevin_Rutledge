<template>
    <Alert v-if="config.isNotAuthorizedError" alertType="danger">
        <strong>Sorry</strong>
        <p>You're not authorized to update the attendance for the selected group.</p>
    </Alert>
    <Alert v-if="config.isNoAttendanceOccurrencesError" alertType="danger">
        <strong>No Occurrences</strong>
        <p>There are currently not any active occurrences for selected group for which to take attendance.</p>
    </Alert>
    <Alert v-if="config.isGroupNotFoundError" alertType="danger">
        <strong>No Group</strong>
        Group was not found.
    </Alert>
    <Alert v-if="config.errorMessage" alertType="danger">
        <strong>Sorry</strong>
        <p>{{ config.errorMessage }}</p>
    </Alert>
    <div v-if="!config.isConfigError">
        <Panel :title="panelTitle">
            <template #headerActions>
                <div class="mr-2">
                    <CampusFilter v-model="campusFilter" v-model:campusGuid="campusGuid" />
                </div>
            </template>

            <template #default>
                <Alert v-if="errorMessage" alertType="danger">{{ errorMessage }}</Alert>

                <div class="row">
                    <div class="col-sm-4">
                        <DatePicker
                            v-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker"
                            v-model="attendanceForDate"
                            :displayCurrentOption="false"
                            :isCurrentDateOffset="false"
                            :disableForceParse="false"
                            :disableShowOnFocus="false"
                            :disableHighlightToday="false"
                            :disallowFutureDateSelection="config.isFutureOccurrenceDateSelectionRestricted"
                            :disallowPastDateSelection="false"
                            label="Attendance For"
                        />
                        <div v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.Specific">
                            <RockLabel>Attendance For</RockLabel>
                            <div>{{ attendanceForDate }}</div>
                        </div>
                        <!--
                            if (attendanceDateSelectionMode === AttendanceForMode.PickFromSchedule
                                ||
                                (
                                    groupLocationConfigHasSchedule
                                    &&
                                    (
                                        attendanceDateSelectionMode === AttendanceForMode.CurrentDate
                                        ||
                                        location.queryString["date"]
                                    )
                                )) {
                                //  then present the schedule options that match the block setting constraints.
                            }
                        -->
                        <AttendanceOccurrencePicker
                            v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.ScheduledDatePicker"
                            Label="Attendance For"
                            rules="required" />
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationPicker
                            v-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.GroupLocationPicker"
                            :groupGuid="config.groupGuid"
                            label="Location"
                            :showBlankItem="true"
                            @update:modelValue="onGroupLocationPickerChanged" />
                        <div v-else-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.Specific">
                            <RockLabel>Location</RockLabel>
                            <div>{{ config.locationLabel }}</div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationSchedulePicker
                            v-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.GroupLocationSchedulePicker"
                            @update:modelValue="onGroupLocationSchedulePickerChanged"
                            :groupGuid="config.groupGuid"
                            label="Schedule"
                            :locationGuid="locationGuid"
                            :showBlankItem="true"
                            />
                        <div v-else-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.Specific">
                            <RockLabel>Schedule</RockLabel>
                            <div>{{ config.scheduleLabel }}</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-3">
                        <InlineCheckBox
                            v-model="didNotMeet"
                            label="We Did Not Meet" />
                    </div>

                    <div class="col-sm-3">
                        <RadioButtonList
                            v-if="config.attendanceOccurrenceTypes && config.isAttendanceOccurrenceTypesSectionShown"
                            v-model="attendanceOccurrenceType"
                            :label="config.attendanceOccurrenceTypesSectionLabel"
                            :horizontal="true"
                            :items="config.attendanceOccurrenceTypes" />
                    </div>

                    <div class="col-sm-3">
                        <PersonPicker @update:modelValue="onAddPerson($event)"></PersonPicker>
                    </div>

                    <div class="col-sm-3">
                        <RockButton v-if="config.addGroupMemberPageUrl" btnType="default" @click="onAddGroupMemberClicked"><i class="fa fa-plus"></i> Add Group Member</RockButton>
                    </div>
                </div>

                <TransitionVerticalCollapse speed="fast">
                    <div v-show="!didNotMeet">
                        <div class="row">
                            <div class="col-sm-4">
                                <SearchFilter v-model="searchFilter" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-12">
                                <RosterFilterPicker
                                    v-model="rosterFilter"
                                    class="mt-3"
                                    :hasAttendedCount="didAttendAttendees.length"
                                    :initials="rosterAttendeesInitials"
                                    :isFilterByFirstNameInitial="sortBy === SortType.FirstNameFirst"
                                    :isMultiselect="true">
                                </RosterFilterPicker>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-12">
                                <AttendanceRosterGrouped v-if="displayedRosterCount > 50" :attendees="sortedAndFilteredRoster" :attendeeGroupLabelDelegate="attendeeGroupLabelDelegate" />
                                <AttendanceRoster v-else :attendees="sortedAndFilteredRoster" />
                            </div>
                        </div>
                    </div>
                </TransitionVerticalCollapse>

                <div class="row">
                    <div class="col-sm-12">
                        <TextBox
                            v-model="notes"
                            label="Notes"
                            :rows="3"
                            textMode="multiline" />
                    </div>
                </div>


                <Alert v-if="!isPrintingRoster && printRosterWarning" alertType="warning">{{ printRosterWarning }}</Alert>

                <div class="actions">
                    <RockButton tooltip="Print Attendance Roster" CssClass="btn btn-default btn-sm btn-square pull-right" @click="onPrintAttendanceRosterClicked()"><i class="fa fa-print"></i></RockButton>
                </div>

                <RockButton @click="onSave">Save</RockButton>
            </template>
        </Panel>
    </div>
</template>

<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import AttendanceOccurrencePicker from "./GroupAttendanceDetail/attendanceOccurrencePicker.partial.obs";
    import AttendanceRoster from "./GroupAttendanceDetail/attendanceRoster.partial.obs";
    import CampusFilter from "./GroupAttendanceDetail/campusFilter.partial.obs";
    import AttendanceRosterGrouped from "./GroupAttendanceDetail/attendanceRosterGrouped.partial.obs";
    import GroupLocationPicker from "./GroupAttendanceDetail/groupLocationPicker.partial.obs";
    import GroupLocationSchedulePicker from "./GroupAttendanceDetail/groupLocationSchedulePicker.partial.obs";
    import SearchFilter from "./GroupAttendanceDetail/searchFilter.partial.obs";
    import { AttendeeComparer, byFirstName, byLastName, compare, SortType } from "./GroupAttendanceDetail/sortType";
    import RosterFilterPicker from "./GroupAttendanceDetail/rosterFilter.partial.obs";
    import Alert from "@Obsidian/Controls/alert.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox";
    import Panel from "@Obsidian/Controls/panel";
    import PersonPicker from "@Obsidian/Controls/personPicker";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockLabel from "@Obsidian/Controls/rockLabel";
    import TextBox from "@Obsidian/Controls/textBox";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse";
    import { GroupAttendanceDetailDateSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailDateSelectionMode";
    import { GroupAttendanceDetailLocationSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailLocationSelectionMode";
    import { GroupAttendanceDetailScheduleSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailScheduleSelectionMode";
    import { Guid } from "@Obsidian/Types";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { GroupAttendanceDetailInitializationBox } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailInitializationBox";
    import { GroupAttendanceDetailPrintRosterResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailPrintRosterResponseBag";
    import { GroupAttendanceDetailRosterAttendeeBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailRosterAttendeeBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceRequestBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceResponseBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { createEveryFilter as every, IRosterFilter, NoFilter } from "./GroupAttendanceDetail/filterType";
    import { AttendeeGroupLabelDelegate } from "./GroupAttendanceDetail/attendeeGroupLabelDelegate";

    // TODO JMH This config should contain the group GUID for use in the specific group controls.
    const config = useConfigurationValues<GroupAttendanceDetailInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();

    //#region Types

    type NullableListItemBags = ListItemBag | ListItemBag[] | null;

    //#endregion

    //#region Values

    //#region Non-reactive Values

    const panelTitle = config.groupName ? `${config.groupName} Attendance` : "Group Attendance";
    const dateFormat = config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker ? "yyyy-MM-dd" : "MM/dd/yyyy";
    const roster: GroupAttendanceDetailRosterAttendeeBag[] = config?.roster ?? [];
    const sortBy = config.areAttendeesSortedByFirstName ? SortType.FirstNameFirst : SortType.LastNameFirst;
    const attendeeComparer: AttendeeComparer =
        sortBy === SortType.FirstNameFirst
            ? compare(byFirstName, byLastName)
            : compare(byLastName, byFirstName);
    const rosterAttendeesInitials: string[] =
        sortBy === SortType.FirstNameFirst
            ? roster.filter(a => !!a.nickName)
                .map(a => a.nickName!.charAt(0).toLocaleUpperCase())
                // Remove duplicates.
                .filter((item, index, arr) => arr.indexOf(item) === index)
                .sort()
            : roster.filter(a => !!a.lastName)
                .map(a => a.lastName!.charAt(0).toLocaleUpperCase())
                // Remove duplicates.
                .filter((item, index, arr) => arr.indexOf(item) === index)
                .sort();

    //#endregion

    //#region Reactive Values

    const isPrintingRoster = ref<boolean>(false);
    const printRosterWarning = ref<string>("");
    const errorMessage = ref<string>("");
    const attendanceForDate = ref<string>(
        (config.attendanceOccurrenceDate && RockDateTime.parseISO(config.attendanceOccurrenceDate)?.toASPString(dateFormat))
            || RockDateTime.now().toASPString(dateFormat));
    const attendanceOccurrenceType = ref<Guid | undefined>(config.selectedAttendanceOccurrenceTypeValue ?? undefined);
    const locationGuid = ref<Guid | undefined | null>(null);
    const scheduleGuid = ref<Guid | undefined | null>(null);
    const didNotMeet = ref<boolean>(config.isDidNotMeetChecked);
    const campusGuid = ref<string | null | undefined>(config.campusGuid);
    const notes = ref<string>(config.notes ?? "");
    const searchFilter = ref<IRosterFilter>(NoFilter);
    const campusFilter = ref<IRosterFilter>(NoFilter);
    const rosterFilter = ref<IRosterFilter>(NoFilter);

    //#endregion Reactive Values

    //#region Computed Values

    const didAttendAttendees = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => roster.filter(m => m.hasAttended) ?? []);
    const sortedAndFilteredRoster = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => {
        return roster.slice() // Copy the array before sorting because `sort()` mutates the array in place.
            .sort(attendeeComparer)
            .filter(attendee => every(campusFilter.value, searchFilter.value, rosterFilter.value).filter(attendee));
    });
    const displayedRosterCount = computed<number>(() => sortedAndFilteredRoster.value.length);
    const attendeeGroupLabelDelegate = computed<AttendeeGroupLabelDelegate>(() => {
        if (sortBy === SortType.FirstNameFirst) {
            return (attendee: GroupAttendanceDetailRosterAttendeeBag) => attendee.nickName?.charAt(0) || "?";
        }
        else {
            return (attendee: GroupAttendanceDetailRosterAttendeeBag) => attendee.lastName?.charAt(0) || "?";
        }
    });

    //#endregion

    //#endregion

    //#region Event Handlers

    function onAddPerson(personId: number): void {
        // TODO JMH Implement this.
        console.log(personId);
    }

    function onAddGroupMemberClicked(): void {
        if (config.addGroupMemberPageUrl) {
            location.href = config.addGroupMemberPageUrl;
        }
    }

    async function onGroupLocationPickerChanged(locationPickerSelection: NullableListItemBags): Promise<void> {
        await updateSchedulePicker(locationPickerSelection as ListItemBag);
    }

    function onGroupLocationSchedulePickerChanged(schedulePickerSelection: NullableListItemBags): void {
        scheduleGuid.value = (schedulePickerSelection as ListItemBag)?.value;
    }

    function onPrintAttendanceRosterClicked(): Promise<void> {
        return printAttendanceRoster();
    }

    async function onSave(): Promise<void> {
        const bag: GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag = {
            didNotOccur: didNotMeet.value,
            attendanceOccurrenceDate: attendanceForDate.value,
            attendanceTypeGuid: attendanceOccurrenceType.value,
            attendees: roster,
            campusGuid: campusGuid.value,
            locationGuid: locationGuid.value,
            notes: notes.value,
            scheduleGuid: scheduleGuid.value,
            areAttendeesSortedByFirstName: sortBy === SortType.FirstNameFirst
        };

        // Clear the error before saving.
        errorMessage.value = "";

        const response = await invokeBlockAction<GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag>("SaveAttendanceOccurrence", { bag });

        if (response?.data?.redirectUrl) {
            window.location.href = response.data.redirectUrl;
        }
        else {
            errorMessage.value = response.errorMessage || "An unexpected error occurred. Please try again.";
        }
    }

    //#endregion

    //#region Functions

    async function printAttendanceRoster(): Promise<void> {
        try {
            isPrintingRoster.value = true;

            var result = await invokeBlockAction<GroupAttendanceDetailPrintRosterResponseBag>("PrintRoster");

            if (result?.errorMessage) {
                printRosterWarning.value = result.errorMessage;
            }
            else if (result?.data?.redirectUrl) {
                window.location.href = result.data.redirectUrl;
            }
        }
        finally {
            isPrintingRoster.value = false;
        }
    }

    async function updateSchedulePicker(locationPickerSelection: ListItemBag | null): Promise<void> {
        locationGuid.value = locationPickerSelection?.value;
    }

    //#endregion

    //#region Watchers

    const rosterRef = computed(() => roster.map(r => ({ hasAttended: r.hasAttended, personGuid: r.personGuid})));
    const stopWatching = watch(rosterRef, (newValue, oldValue, onCleanup) => {
        const updatedAttendees = newValue.filter(newP => oldValue.some(oldP => oldP.personGuid === newP.personGuid && oldP.hasAttended !== newP.hasAttended));

        console.log("People marked as DidAttend: ", JSON.stringify(updatedAttendees.filter(a => a.hasAttended)));
        console.log("People marked as !DidAttend: ", JSON.stringify(updatedAttendees.filter(a => !a.hasAttended)));
        onCleanup(() => console.log("TODO JMH Do we need to do any cleanup?"));
    });

    //#endregion

    onConfigurationValuesChanged(useReloadBlock());
</script>