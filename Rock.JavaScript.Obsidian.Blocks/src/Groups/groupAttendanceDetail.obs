<template>
    <Alert v-if="config.isNotAuthorizedError" alertType="danger">
        <strong>Sorry</strong>
        <p>You're not authorized to update the attendance for the selected group.</p>
    </Alert>
    <Alert v-if="config.isNoAttendanceOccurrencesError" alertType="danger">
        <strong>No Occurrences</strong>
        <p>There are currently not any active occurrences for selected group for which to take attendance.</p>
    </Alert>
    <Alert v-if="config.isGroupNotFoundError" alertType="danger">
        <strong>No Group</strong>
        Group was not found.
    </Alert>
    <Alert v-if="config.errorMessage" alertType="danger">
        <strong>Sorry</strong>
        <p>{{ config.errorMessage }}</p>
    </Alert>
    <div v-if="!config.isConfigError">
        <Panel :title="title">
            <template #headerActions>
                <div class="mr-2">
                    <CampusPicker
                        v-model="campusGuid"
                        blankValue="All Campuses"
                        :includeInactive="true"
                        :multiple="false"
                        :showBlankItem="true" />
                </div>
            </template>

            <template #default>
                <Alert v-if="errorMessage" alertType="danger">{{ errorMessage }}</Alert>

                <div class="row">
                    <div class="col-sm-4">
                        <DatePicker
                            v-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker"
                            v-model="attendanceForDate"
                            :displayCurrentOption="false"
                            :isCurrentDateOffset="false"
                            :disableForceParse="false"
                            :disableShowOnFocus="false"
                            :disableHighlightToday="false"
                            :disallowFutureDateSelection="config.isFutureOccurrenceDateSelectionRestricted"
                            :disallowPastDateSelection="false"
                            label="Attendance For"
                        />
                        <div v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.Specific">
                            <RockLabel>Attendance For</RockLabel>
                            <div>{{ attendanceForDate }}</div>
                        </div>
                        <!--
                            if (attendanceDateSelectionMode === AttendanceForMode.PickFromSchedule
                                ||
                                (
                                    groupLocationConfigHasSchedule
                                    &&
                                    (
                                        attendanceDateSelectionMode === AttendanceForMode.CurrentDate
                                        ||
                                        location.queryString["date"]
                                    )
                                )) {
                                //  then present the schedule options that match the block setting constraints.
                            }
                        -->
                        <AttendanceOccurrencePicker
                            v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.ScheduledDatePicker"
                            Label="Attendance For"
                            rules="required" />
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationPicker
                            v-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.GroupLocationPicker"
                            :groupGuid="config.groupGuid"
                            label="Location"
                            :showBlankItem="true"
                            @update:modelValue="onGroupLocationPickerChanged" />
                        <div v-else-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.Specific">
                            <RockLabel>Location</RockLabel>
                            <div>{{ config.locationLabel }}</div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationSchedulePicker
                            v-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.GroupLocationSchedulePicker"
                            @update:modelValue="onGroupLocationSchedulePickerChanged"
                            :groupGuid="config.groupGuid"
                            label="Schedule"
                            :locationGuid="locationGuid"
                            :showBlankItem="true"
                            />
                        <div v-else-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.Specific">
                            <RockLabel>Schedule</RockLabel>
                            <div>{{ config.scheduleLabel }}</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-3">
                        <InlineCheckBox
                            v-model="didNotMeet"
                            label="We Did Not Meet" />
                    </div>

                    <div class="col-sm-3">
                        <RadioButtonList
                            v-if="config.attendanceOccurrenceTypes && config.isAttendanceOccurrenceTypesSectionShown"
                            v-model="attendanceOccurrenceType"
                            :label="config.attendanceOccurrenceTypesSectionLabel"
                            :horizontal="true"
                            :items="config.attendanceOccurrenceTypes" />
                    </div>

                    <div class="col-sm-3">
                        <PersonPicker @update:modelValue="onAddPerson($event)"></PersonPicker>
                    </div>

                    <div class="col-sm-3">
                        <RockButton v-if="config.addGroupMemberPageUrl" btnType="default" @click="onAddGroupMemberClicked"><i class="fa fa-plus"></i> Add Group Member</RockButton>
                    </div>
                </div>

                <TransitionVerticalCollapse speed="fast">
                    <div v-show="!didNotMeet">
                        <div class="row">
                            <div class="col-sm-4">
                                <TextBox v-model="searchText" placeholder="Search" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-12">
                                <RosterFilterPicker
                                    v-model="rosterFilter"
                                    class="mt-3"
                                    :lastNameInitials="rosterLastNameInitials"
                                    :hasAttendedCount="attendedPeople.length">
                                </RosterFilterPicker>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-12">
                                <AttendanceRosterGrouped v-if="filteredCount > 50" :items="filteredAndSortedRoster" />
                                <AttendanceRoster v-else :items="filteredAndSortedRoster" />
                            </div>
                        </div>
                    </div>
                </TransitionVerticalCollapse>

                <div class="row">
                    <div class="col-sm-12">
                        <TextBox
                            v-model="notes"
                            label="Notes"
                            :rows="3"
                            textMode="multiline" />
                    </div>
                </div>


                <Alert v-if="!isPrintingRoster && printRosterWarning" alertType="warning">{{ printRosterWarning }}</Alert>

                <div class="actions">
                    <RockButton tooltip="Print Attendance Roster" CssClass="btn btn-default btn-sm btn-square pull-right" @click="onPrintAttendanceRosterClicked()"><i class="fa fa-print"></i></RockButton>
                </div>

                <RockButton @click="onSave">Save</RockButton>
            </template>
        </Panel>
    </div>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import AttendanceOccurrencePicker from "./GroupAttendanceDetail/attendanceOccurrencePicker.partial.obs";
    import AttendanceRoster from "./GroupAttendanceDetail/attendanceRoster.partial.obs";
    import AttendanceRosterGrouped from "./GroupAttendanceDetail/attendanceRosterGrouped.partial.obs";
    import GroupLocationPicker from "./GroupAttendanceDetail/groupLocationPicker.partial.obs";
    import GroupLocationSchedulePicker from "./GroupAttendanceDetail/groupLocationSchedulePicker.partial.obs";
    import { SortType } from "./GroupAttendanceDetail/sortType";
    import RosterFilterPicker from "./GroupAttendanceDetail/rosterFilter.partial.obs";
    import Alert from "@Obsidian/Controls/alert.obs";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox";
    import Panel from "@Obsidian/Controls/panel";
    import PersonPicker from "@Obsidian/Controls/personPicker";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockLabel from "@Obsidian/Controls/rockLabel";
    import TextBox from "@Obsidian/Controls/textBox";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse";
    import { GroupAttendanceDetailDateSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailDateSelectionMode";
    import { GroupAttendanceDetailLocationSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailLocationSelectionMode";
    import { GroupAttendanceDetailScheduleSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailScheduleSelectionMode";
    import { Guid } from "@Obsidian/Types";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { GroupAttendanceDetailInitializationBox } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailInitializationBox";
    import { GroupAttendanceDetailPrintRosterResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailPrintRosterResponseBag";
    import { GroupAttendanceDetailRosterAttendeeBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailRosterAttendeeBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceRequestBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceResponseBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { createFilter, getCombinationFilter as combineFilters, IRosterFilter, NoFilter } from "./GroupAttendanceDetail/filterType";

    // TODO JMH This config should contain the group GUID for use in the specific group controls.
    const config = useConfigurationValues<GroupAttendanceDetailInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();

    type NullableListItemBags = ListItemBag | ListItemBag[] | null;

    const errorMessage = ref<string>("");
    const title = computed<string>(() => config.groupName ? `${config.groupName} Attendance` : "Group Attendance");
    const roster = ref<GroupAttendanceDetailRosterAttendeeBag[]>(config?.roster ?? []);
    const dateFormat = config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker ? "yyyy-MM-dd" : "MM/dd/yyyy";
    const attendanceForDate = ref<string>(
        config.attendanceOccurrenceDate
            ? RockDateTime.parseISO(config.attendanceOccurrenceDate)!.toASPString(dateFormat)
            : RockDateTime.now().toASPString(dateFormat));
    const attendanceOccurrenceType = ref<Guid | undefined>(config.selectedAttendanceOccurrenceTypeValue ?? undefined);
    const locationGuid = ref<Guid | undefined | null>(null);
    const scheduleGuid = ref<Guid | undefined | null>(null);
    const didNotMeet = ref<boolean>(config.isDidNotMeetChecked);
    const attendedPeople = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => roster.value.filter(m => m.personGuid && m.hasAttended) ?? []);
    const sortBy = ref<SortType>(config.areMembersSortedByFirstName ? SortType.FirstNameFirst : SortType.LastNameFirst);
    const rosterComparer = computed<RosterComparer>(() => {
        if (sortBy.value === SortType.FirstNameFirst) {
            return compare(byFirstName, byLastName);
        }
        return compare(byLastName, byFirstName);
    });

    const internalSearchText = ref<string>("");
    const searchText = computed<string>({
        get(): string {
            return internalSearchText.value;
        },
        set(newValue: string) {
            internalSearchText.value = newValue;
        }
    });
    const isRegex: RegExp = /\/(.+)\/(.*)/;
    const searchFilterOrNoFilter = computed<IRosterFilter>(() => {
        const text = searchText.value;

        if (text) {
            const match = text.match(isRegex);
            if (match && match.length) {
                try {
                    const regex = new RegExp(match[1], match[2]);
                    if (regex) {
                        return createFilter((attendee: GroupAttendanceDetailRosterAttendeeBag) => !!attendee.fullName && regex.test(attendee.fullName));
                    }
                }
                catch {
                    // `text` is not a valid regex string so try a simple text match.
                }
            }

            // `text` is not a valid regex string so try a simple text match.
            return createFilter((attendee: GroupAttendanceDetailRosterAttendeeBag) => !!attendee.fullName && attendee.fullName.toLocaleLowerCase().indexOf(text) >= 0);
        }

        return NoFilter;
    });
    const campusGuid = ref<ListItemBag | null>(config.campusGuid ? ({ text: config.campusName, value: config.campusGuid }) : null);
    const campusFilterOrNoFilter = computed<IRosterFilter>(() => {
        if (campusGuid.value) {
            return createFilter((attendee) => {
                // Return `true` if for some reason the campus guid is cleared by the time this runs.
                const guid = campusGuid.value?.value;
                if (!guid) {
                    return true;
                }

                if (!attendee.campusGuid) {
                    return false;
                }

                return attendee.campusGuid === guid;
            });
        }

        return NoFilter;
    });
    const rosterFilter = ref<IRosterFilter>(NoFilter);
    const allRosterFilters = computed<IRosterFilter>(() => combineFilters(combineFilters(campusFilterOrNoFilter.value, searchFilterOrNoFilter.value), rosterFilter.value));
    const filteredAndSortedRoster = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => {
        return sortedRoster.value.filter(attendee => allRosterFilters.value.filter(attendee));
    });
    const sortedRoster = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => {
        return roster.value.slice().sort((attendee1, attendee2) => rosterComparer.value(attendee1, attendee2));
    });
    const filteredCount = computed<number>(() => filteredAndSortedRoster.value.length);

    const notes = ref<string>(config.notes ?? "");
    const rosterLastNameInitials = computed<string[]>(() => roster.value
        .filter(a => !!a.lastName)
        .map(a => a.lastName!.charAt(0).toLocaleUpperCase())
        // Remove duplicates.
        .filter((item, index, arr) => arr.indexOf(item) === index)
        .sort());

    //#region Event Handlers

    function onAddPerson(personId: number): void {
        console.log(personId);
    }

    function onAddGroupMemberClicked(): void {
        if (config.addGroupMemberPageUrl) {
            location.href = config.addGroupMemberPageUrl;
        }
    }

    async function onGroupLocationPickerChanged(locationPickerSelection: NullableListItemBags): Promise<void> {
        await updateSchedulePicker(locationPickerSelection as ListItemBag);
    }

    function onGroupLocationSchedulePickerChanged(schedulePickerSelection: NullableListItemBags): void {
        scheduleGuid.value = (schedulePickerSelection as ListItemBag)?.value;
    }

    function onPrintAttendanceRosterClicked(): Promise<void> {
        return printAttendanceRoster();
    }

    async function onSave(): Promise<void> {
        const bag: GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag = {
            didNotOccur: didNotMeet.value,
            attendanceOccurrenceDate: attendanceForDate.value,
            attendanceTypeGuid: attendanceOccurrenceType.value,
            attendees: roster.value,
            campusGuid: campusGuid.value?.value,
            locationGuid: locationGuid.value,
            notes: notes.value,
            scheduleGuid: scheduleGuid.value,
            areMembersSortedByFirstName: sortBy.value === SortType.FirstNameFirst
        };

        // Clear the error before saving.
        errorMessage.value = "";

        const response = await invokeBlockAction<GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag>("SaveAttendanceOccurrence", { bag });

        if (response?.data?.redirectUrl) {
            window.location.href = response.data.redirectUrl;
        }
        else {
            errorMessage.value = response.errorMessage || "An unexpected error occurred. Please try again.";
        }
    }

    //#endregion

    //#region Functions

    type RosterComparer = (m1: GroupAttendanceDetailRosterAttendeeBag, m2: GroupAttendanceDetailRosterAttendeeBag) => number;

    function compare(comparer: RosterComparer, thenBy?: RosterComparer): RosterComparer {
        return (m1: GroupAttendanceDetailRosterAttendeeBag, m2: GroupAttendanceDetailRosterAttendeeBag): number => {
            const comparison = comparer(m1, m2);

            if (comparison === 0 && thenBy) {
                return thenBy(m1, m2);
            }

            return comparison;
        };
    }

    const byFirstName: RosterComparer = (member1: GroupAttendanceDetailRosterAttendeeBag, member2: GroupAttendanceDetailRosterAttendeeBag): number => {
        return compareStrings(member1.nickName, member2.nickName);
    };

    const byLastName: RosterComparer = (member1: GroupAttendanceDetailRosterAttendeeBag, member2: GroupAttendanceDetailRosterAttendeeBag): number => {
        return compareStrings(member1.lastName, member2.lastName);
    };

    function compareStrings(str1: string | null | undefined, str2: string | null | undefined, thenBy?: () => number): number {
        const comparison = (str1 ?? "").localeCompare(str2 ?? "");

        if (comparison === 0 && thenBy) {
            return thenBy();
        }

        return comparison;
    }

    const isPrintingRoster = ref<boolean>(false);
    const printRosterWarning = ref<string>("");

    async function printAttendanceRoster(): Promise<void> {
        try {
            isPrintingRoster.value = true;

            var result = await invokeBlockAction<GroupAttendanceDetailPrintRosterResponseBag>("PrintRoster");

            if (result?.errorMessage) {
                printRosterWarning.value = result.errorMessage;
            }
            else if (result?.data?.redirectUrl) {
                window.location.href = result.data.redirectUrl;
            }
        }
        finally {
            isPrintingRoster.value = false;
        }
    }

    async function updateSchedulePicker(locationPickerSelection: ListItemBag | null): Promise<void> {
        locationGuid.value = locationPickerSelection?.value;
    }

    //#endregion

    onConfigurationValuesChanged(useReloadBlock());
</script>