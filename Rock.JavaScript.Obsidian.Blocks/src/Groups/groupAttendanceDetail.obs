<template>
    <Alert v-if="config.isNotAuthorizedError" alertType="danger">
        <strong>Sorry</strong>
        <p>You're not authorized to update the attendance for the selected group.</p>
    </Alert>
    <Alert v-if="config.isNoAttendanceOccurrencesError" alertType="danger">
        <strong>No Occurrences</strong>
        <p>There are currently not any active occurrences for selected group for which to take attendance.</p>
    </Alert>
    <Alert v-if="config.isGroupNotFoundError" alertType="danger">
        <strong>No Group</strong>
        Group was not found.
    </Alert>
    <Alert v-if="config.errorMessage" alertType="danger">
        <strong>Sorry</strong>
        <p>{{ config.errorMessage }}</p>
    </Alert>
    <div v-if="!config.isConfigError">
        <Panel :title="panelTitle">
            <template #headerActions>
                <div class="mr-2">
                    <CampusFilter v-model="campusFilter" v-model:campusGuid="campusGuid" />
                </div>
            </template>

            <template #default>
                <Alert v-if="errorMessage" alertType="danger">{{ errorMessage }}</Alert>

                <div class="row">
                    <div class="col-sm-4">
                        <DatePicker
                            v-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker"
                            v-model="attendanceForDate"
                            :displayCurrentOption="false"
                            :isCurrentDateOffset="false"
                            :disableForceParse="false"
                            :disableShowOnFocus="false"
                            :disableHighlightToday="false"
                            :disallowFutureDateSelection="config.isFutureOccurrenceDateSelectionRestricted"
                            :disallowPastDateSelection="false"
                            label="Attendance For"
                        />
                        <div v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.Specific">
                            <RockLabel>Attendance For</RockLabel>
                            <div>{{ attendanceForDate }}</div>
                        </div>
                        <!--
                            if (attendanceDateSelectionMode === AttendanceForMode.PickFromSchedule
                                ||
                                (
                                    groupLocationConfigHasSchedule
                                    &&
                                    (
                                        attendanceDateSelectionMode === AttendanceForMode.CurrentDate
                                        ||
                                        location.queryString["date"]
                                    )
                                )) {
                                //  then present the schedule options that match the block setting constraints.
                            }
                        -->
                        <AttendanceOccurrencePicker
                            v-else-if="config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.ScheduledDatePicker"
                            Label="Attendance For"
                            rules="required" />
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationPicker
                            v-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.GroupLocationPicker"
                            :groupGuid="config.groupGuid"
                            label="Location"
                            :showBlankItem="true"
                            @update:modelValue="onGroupLocationPickerChanged" />
                        <div v-else-if="config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.Specific">
                            <RockLabel>Location</RockLabel>
                            <div>{{ config.locationLabel }}</div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <GroupLocationSchedulePicker
                            v-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.GroupLocationSchedulePicker"
                            @update:modelValue="onGroupLocationSchedulePickerChanged"
                            :groupGuid="config.groupGuid"
                            label="Schedule"
                            :locationGuid="locationGuid"
                            :showBlankItem="true"
                            />
                        <div v-else-if="config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.Specific">
                            <RockLabel>Schedule</RockLabel>
                            <div>{{ config.scheduleLabel }}</div>
                        </div>
                    </div>
                </div>

                <TransitionVerticalCollapse speed="fast">
                    <div v-show="attendanceOccurrenceGuid">
                        <div class="row">
                            <div class="col-sm-3">
                                <InlineCheckBox
                                    v-model="internalDidNotOccur"
                                    :disabled="isSavingDidNotOccur"
                                    label="We Did Not Meet" />
                            </div>

                            <div class="col-sm-3">
                                <RadioButtonList
                                    v-if="config.attendanceOccurrenceTypes && config.isAttendanceOccurrenceTypesSectionShown"
                                    v-model="attendanceOccurrenceType"
                                    :label="config.attendanceOccurrenceTypesSectionLabel"
                                    :horizontal="true"
                                    :items="config.attendanceOccurrenceTypes" />
                            </div>

                            <div class="col-sm-3">
                                <PersonPicker @update:modelValue="onAddPerson($event)"></PersonPicker>
                            </div>

                            <div class="col-sm-3">
                                <RockButton v-if="config.addGroupMemberPageUrl" btnType="default" @click="onAddGroupMemberClicked"><i class="fa fa-plus"></i> Add Group Member</RockButton>
                            </div>
                        </div>

                        <TransitionVerticalCollapse speed="fast">
                            <div v-show="!internalDidNotOccur">
                                <div class="row">
                                    <div class="col-sm-4">
                                        <SearchFilter v-model="searchFilter" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <RosterFilterPicker
                                            v-model="rosterFilter"
                                            class="mt-3"
                                            :attendances="attendances"
                                            :isFilterByFirstNameInitial="sortBy === SortType.FirstNameFirst"
                                            :isMultiselect="true">
                                        </RosterFilterPicker>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-sm-12">
                                        <AttendanceRoster
                                            :attendances="attendances"
                                            :filterBy="attendanceFilterByDelegate"
                                            :groupBy="attendanceGroupByDelegate"
                                            :groupWhenFilteredAttendanceCountExceeds="50"
                                            :sortBy="attendanceSortByDelegate"
                                            @attendanceChanged="onAttendanceChanged($event)" />
                                    </div>
                                </div>
                            </div>
                        </TransitionVerticalCollapse>

                        <div class="row">
                            <div class="col-sm-12">
                                <TextBox
                                    v-model="notes"
                                    label="Notes"
                                    :rows="3"
                                    textMode="multiline" />
                            </div>
                        </div>


                        <Alert v-if="!isPrintingRoster && printRosterWarning" alertType="warning">{{ printRosterWarning }}</Alert>

                        <div class="actions">
                            <RockButton tooltip="Print Attendance Roster" CssClass="btn btn-default btn-sm btn-square pull-right" @click="onPrintAttendanceRosterClicked()"><i class="fa fa-print"></i></RockButton>
                        </div>

                        <RockButton @click="onSaveClicked()">Save</RockButton>
                    </div>
                </TransitionVerticalCollapse>
            </template>
        </Panel>
    </div>
</template>

<script setup lang="ts">
    import { computed, ref, watch, WatchStopHandle } from "vue";
    import AttendanceOccurrencePicker from "./GroupAttendanceDetail/attendanceOccurrencePicker.partial.obs";
    import CampusFilter from "./GroupAttendanceDetail/campusFilter.partial.obs";
    import AttendanceRoster from "./GroupAttendanceDetail/attendanceRoster.partial.obs";
    import GroupLocationPicker from "./GroupAttendanceDetail/groupLocationPicker.partial.obs";
    import GroupLocationSchedulePicker from "./GroupAttendanceDetail/groupLocationSchedulePicker.partial.obs";
    import SearchFilter from "./GroupAttendanceDetail/searchFilter.partial.obs";
    import { AttendanceSortByDelegate, byFirstName, byLastName, createSortBy, SortType } from "./GroupAttendanceDetail/attendanceSortByDelegate";
    import RosterFilterPicker from "./GroupAttendanceDetail/attendanceFilter.partial.obs";
    import { createEveryFilter as every, IRosterFilter, NoFilter } from "./GroupAttendanceDetail/filterType";
    import { AttendanceGroupByDelegate } from "./GroupAttendanceDetail/attendanceGroupByDelegate";
    import Alert from "@Obsidian/Controls/alert.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox";
    import Panel from "@Obsidian/Controls/panel";
    import PersonPicker from "@Obsidian/Controls/personPicker";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockLabel from "@Obsidian/Controls/rockLabel";
    import TextBox from "@Obsidian/Controls/textBox";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse";
    import { GroupAttendanceDetailDateSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailDateSelectionMode";
    import { GroupAttendanceDetailLocationSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailLocationSelectionMode";
    import { GroupAttendanceDetailScheduleSelectionMode } from "@Obsidian/Enums/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailScheduleSelectionMode";
    import { Guid } from "@Obsidian/Types";
    import { HttpResult } from "@Obsidian/Types/Utility/http";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { GroupAttendanceDetailInitializationBox } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailInitializationBox";
    import { GroupAttendanceDetailPrintRosterResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailPrintRosterResponseBag";
    import { GroupAttendanceDetailMarkAttendanceRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailMarkAttendanceRequestBag";
    import { GroupAttendanceDetailUpdateDidNotOccurRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailUpdateDidNotOccurRequestBag";
    import { GroupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag";
    import { GroupAttendanceDetailRosterAttendeeBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailRosterAttendeeBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceRequestBag";
    import { GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupAttendanceDetail/groupAttendanceDetailSaveAttendanceOccurrenceResponseBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { AttendanceUpdatedMessageBag } from "@Obsidian/ViewModels/Event/attendanceUpdatedMessageBag";
    import { AttendanceStatus } from "@Obsidian/Enums/Event/attendanceStatus";
    import { getTopic, ITopic, ServerFunctions } from "@Obsidian/Utility/realTime";
    import { AttendanceFilterByDelegate } from "./GroupAttendanceDetail/attendanceFilterByDelegate";

    // TODO JMH This config should contain the group GUID for use in the specific group controls.
    const config = ref(useConfigurationValues<GroupAttendanceDetailInitializationBox>());
    const invokeBlockAction = useInvokeBlockAction();

    //#region Types

    type NullableListItemBags = ListItemBag | ListItemBag[] | null;

    //#endregion

    //#region Values

    //#region Reactive Values

    const dateFormat = computed(() => config.value.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker ? "yyyy-MM-dd" : "MM/dd/yyyy");
    const isPrintingRoster = ref<boolean>(false);
    const printRosterWarning = ref<string>("");
    const errorMessage = ref<string>("");
    const searchFilter = ref<IRosterFilter>(NoFilter);
    const campusFilter = ref<IRosterFilter>(NoFilter);
    const rosterFilter = ref<IRosterFilter>(NoFilter);
    const attendanceOccurrenceGuid = ref<string | null | undefined>(config.value.attendanceOccurrenceGuid);
    const attendanceForDate = ref<string>(
        (config.value.attendanceOccurrenceDate && RockDateTime.parseISO(config.value.attendanceOccurrenceDate)?.toASPString(dateFormat.value))
            || RockDateTime.now().toASPString(dateFormat.value));
    const attendanceOccurrenceType = ref<Guid | undefined>(config.value.selectedAttendanceOccurrenceTypeValue ?? undefined);
    const locationGuid = ref<Guid | undefined | null>(config.value.locationGuid);
    const scheduleGuid = ref<Guid | undefined | null>(config.value.scheduleGuid);
    const didNotOccur = ref<boolean>(config.value.isDidNotMeetChecked);
    const internalDidNotOccur = computed<boolean>({
        get(): boolean {
            return didNotOccur.value;
        },
        set(newValue: boolean) {
            // Prevent updating if we are in the middle of saving.
            if (!isSavingDidNotOccur.value) {
                didNotOccur.value = newValue;
            }
        }
    });
    const isSavingDidNotOccur = ref<boolean>(false);
    const campusGuid = ref<string | null | undefined>(config.value.campusGuid);
    const notes = ref<string>(config.value.notes ?? "");
    const isAutoSaveAttendancesEnabled = ref<boolean>(false);

    //#endregion Reactive Values

    //#region Computed Values
    const panelTitle = computed(() => config.value.groupName ? `${config.value.groupName} Attendance` : "Group Attendance");
    const attendances = computed<GroupAttendanceDetailRosterAttendeeBag[]>(() => config.value?.roster ?? []);
    const sortBy = computed<SortType>(() => config.value.areAttendeesSortedByFirstName ? SortType.FirstNameFirst : SortType.LastNameFirst);
    const attendanceSortByDelegate = computed<AttendanceSortByDelegate>(() =>
        sortBy.value === SortType.FirstNameFirst
            ? createSortBy(byFirstName, byLastName)
            : createSortBy(byLastName, byFirstName));
    const attendanceFilterByDelegate = computed<AttendanceFilterByDelegate>(() => (attendance) => every(campusFilter.value, searchFilter.value, rosterFilter.value).filter(attendance));
    const attendanceGroupByDelegate = computed<AttendanceGroupByDelegate | null>(() => {
        if (sortBy.value === SortType.FirstNameFirst) {
            return (attendance: GroupAttendanceDetailRosterAttendeeBag) => attendance.nickName?.charAt(0) || "?";
        }
        else {
            return (attendance: GroupAttendanceDetailRosterAttendeeBag) => attendance.lastName?.charAt(0) || "?";
        }
    });

    //#endregion

    //#endregion

    //#region Event Handlers

    function onAddPerson(personId: number): void {
        // TODO JMH Implement this.
        console.log(personId);
    }

    function onAddGroupMemberClicked(): void {
        if (config.value.addGroupMemberPageUrl) {
            location.href = config.value.addGroupMemberPageUrl;
        }
    }

    async function onAttendanceChanged(attendance: GroupAttendanceDetailRosterAttendeeBag): Promise<void> {
        if (!isAutoSaveAttendancesEnabled.value) {
            return;
        }

        const bag: GroupAttendanceDetailMarkAttendanceRequestBag = {
            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,
            personGuid: attendance.personGuid,
            didAttend: attendance.didAttend
        };

        await invokeBlockAction<void>("MarkAttendance", { bag }).then(() => console.log(`updated attendance ${formattedJson(bag)}`));
    }

    async function onGroupLocationPickerChanged(locationPickerSelection: NullableListItemBags): Promise<void> {
        await updateSchedulePicker(locationPickerSelection as ListItemBag);
    }

    function onGroupLocationSchedulePickerChanged(schedulePickerSelection: NullableListItemBags): void {
        scheduleGuid.value = (schedulePickerSelection as ListItemBag)?.value;
    }

    function onPrintAttendanceRosterClicked(): Promise<void> {
        return printAttendanceRoster();
    }

    async function onSaveClicked(): Promise<HttpResult<GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag>> {
        return await save();
    }

    //#endregion

    //#region Functions

    async function printAttendanceRoster(): Promise<void> {
        try {
            isPrintingRoster.value = true;

            var result = await invokeBlockAction<GroupAttendanceDetailPrintRosterResponseBag>("PrintRoster");

            if (result?.errorMessage) {
                printRosterWarning.value = result.errorMessage;
            }
            else if (result?.data?.redirectUrl) {
                window.location.href = result.data.redirectUrl;
            }
        }
        finally {
            isPrintingRoster.value = false;
        }
    }

    async function save(): Promise<HttpResult<GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag>> {
        const bag: GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag = {
            didNotOccur: internalDidNotOccur.value,
            attendanceOccurrenceDate: attendanceForDate.value,
            attendanceTypeGuid: attendanceOccurrenceType.value,
            attendees: attendances.value,
            campusGuid: campusGuid.value,
            locationGuid: locationGuid.value,
            notes: notes.value,
            scheduleGuid: scheduleGuid.value,
            areAttendeesSortedByFirstName: sortBy.value === SortType.FirstNameFirst,
            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value
        };

        // Clear the error before saving.
        errorMessage.value = "";

        const response = await invokeBlockAction<GroupAttendanceDetailSaveAttendanceOccurrenceResponseBag>("SaveAttendanceOccurrence", { bag });

        if (response?.data?.redirectUrl) {
            attendanceOccurrenceGuid.value = response.data.attendanceOccurrenceGuid;
        }
        else {
            errorMessage.value = response.errorMessage || "An unexpected error occurred. Please try again.";
        }

        return response;
    }

    async function getOrCreate(): Promise<void> {
        const bag: GroupAttendanceDetailSaveAttendanceOccurrenceRequestBag = {
            didNotOccur: internalDidNotOccur.value,
            attendanceOccurrenceDate: attendanceForDate.value,
            attendanceTypeGuid: attendanceOccurrenceType.value,
            attendees: attendances.value,
            campusGuid: campusGuid.value,
            locationGuid: locationGuid.value,
            notes: notes.value,
            scheduleGuid: scheduleGuid.value,
            areAttendeesSortedByFirstName: sortBy.value === SortType.FirstNameFirst,
            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value
        };

        // Clear the error before saving.
        errorMessage.value = "";

        const response = await invokeBlockAction<GroupAttendanceDetailInitializationBox>("GetOrCreate", { bag });

        if (response?.data) {
            config.value = response.data;
        }
        else if (config) {
            config.value.errorMessage = response?.errorMessage || "An unexpected error occurred.";
        }
    }

    async function updateSchedulePicker(locationPickerSelection: ListItemBag | null): Promise<void> {
        locationGuid.value = locationPickerSelection?.value;
    }

    const autoSaveAttendancesOffHandle = ref<WatchStopHandle | null>(null);
    const autoSaveDidNotOccurOffHandle = ref<WatchStopHandle | null>(null);
    const autoSaveAttendanceOccurrenceTypeOffHandle = ref<WatchStopHandle | null>(null);

    function autoSaveAttendancesOn(): void {
        if (isAutoSaveAttendancesEnabled.value) {
            // Skip if auto-save is already on.
            return;
        }

        isAutoSaveAttendancesEnabled.value = true;
    }

    function autoSaveAttendancesOff(): void {
        if (!autoSaveAttendancesOffHandle.value) {
            return;
        }

        console.log("Stopping watch handle");
        autoSaveAttendancesOffHandle.value();
        autoSaveAttendancesOffHandle.value = null;
    }

    function autoSaveAttendanceOccurrenceTypeOn(): void {
        if (!autoSaveAttendanceOccurrenceTypeOffHandle.value) {
            autoSaveAttendanceOccurrenceTypeOffHandle.value = watch([attendanceOccurrenceType], ([newAttendanceOccurrenceType], [oldAttendanceOccurenceType], onCleanup) => {
                onCleanup(() => autoSaveAttendanceOccurrenceTypeOffHandle.value = null);

                if (newAttendanceOccurrenceType !== oldAttendanceOccurenceType) {
                    const bag: GroupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag = {
                        attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,
                        attendanceOccurrenceTypeGuid: newAttendanceOccurrenceType
                    };
                    invokeBlockAction("UpdateAttendanceOccurrenceType", { bag }).then(() => console.log(`updated attendance occurrence type ${formattedJson(bag)}`));
                }
            });
        }
    }

    function autoSaveDidNotOccurOff(): void {
        if (!autoSaveDidNotOccurOffHandle.value) {
            return;
        }

        autoSaveDidNotOccurOffHandle.value();
        autoSaveDidNotOccurOffHandle.value = null;
    }

    const actions = {
        updateDidNotOccur: async (bag: GroupAttendanceDetailUpdateDidNotOccurRequestBag): Promise<void> => {
            try {
                isSavingDidNotOccur.value = true;

                // TODO JMH Prevent the user from checking/unchecking the did occur checkbox until the value is saved.
                await invokeBlockAction<void>("UpdateDidNotOccur", { bag });

                console.log(`updated didNotOccur ${formattedJson(bag)}`);
            }
            finally {
                isSavingDidNotOccur.value = false;
            }
        }
    };

    function autoSaveDidNotOccurOn(): void {
        if (!autoSaveDidNotOccurOffHandle.value) {
            autoSaveDidNotOccurOffHandle.value = watch([internalDidNotOccur], ([newDidNotOccur], [oldDidNotOccur], onCleanup) => {
                onCleanup(() => autoSaveDidNotOccurOffHandle.value = null);

                if (newDidNotOccur !== oldDidNotOccur) {
                    if (isSavingDidNotOccur.value) {
                        // Cancel if we are already saving.
                        console.log("already saving did not occur so cancelling");
                        return;
                    }

                    const bag: GroupAttendanceDetailUpdateDidNotOccurRequestBag = {
                        attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,
                        didNotOccur: newDidNotOccur
                    };

                    if (bag.didNotOccur) {
                        // If the occurrence did not happen, then stop auto-saving attendances before we auto-save "did occur".
                        autoSaveAttendancesOff();
                    }

                    actions.updateDidNotOccur(bag).then(() => {
                        if (!bag.didNotOccur) {
                            // If it "did occur", then start auto-saving attendances after "did occur" is auto-saved.
                            autoSaveAttendancesOn();
                        }
                    });
                }
            });
        }
    }

    function autoSaveAttendanceOccurrenceTypeOff(): void {
        if (!autoSaveAttendanceOccurrenceTypeOffHandle.value) {
            return;
        }

        autoSaveAttendanceOccurrenceTypeOffHandle.value();
        autoSaveAttendanceOccurrenceTypeOffHandle.value = null;
    }

    const topic = ref<GroupAttendanceTopic | null>();

    async function autoSaveOn(): Promise<void> {
        if (attendanceOccurrenceGuid.value && config.value.groupGuid) {
            topic.value = await startRealTime(config.value.groupGuid, attendanceOccurrenceGuid.value, { onAttendanceUpdated: onAttendanceUpdated });
        }
        autoSaveAttendancesOn();
        autoSaveDidNotOccurOn();
        autoSaveAttendanceOccurrenceTypeOn();
    }

    function autoSaveOff(): void {
        if (topic.value) {
            stopRealTime(topic.value);
        }
        autoSaveAttendancesOff();
        autoSaveAttendanceOccurrenceTypeOff();
        autoSaveDidNotOccurOff();
    }

    function formattedJson(value: any): string {
        return JSON.stringify(value, null, 4);
    }

    function onAttendanceUpdated(bag: AttendanceUpdatedMessageBag): void {
        console.log(`on attendance updated from server ${formattedJson(bag)}`);
        // Ignore if not for this occurrence.
        if (bag.occurrenceGuid !== attendanceOccurrenceGuid.value) {
            return;
        }

        const attendance = attendances.value.find(attendance => attendance.personGuid === bag.personGuid);

        if (attendance) {
            attendance.didAttend = bag.status === AttendanceStatus.DidAttend;
        }
        else {
            const fullNameParts = bag.personFullName?.split(" ") ?? [];
            config.value.roster = [...attendances.value, {
                didAttend: bag.status === AttendanceStatus.DidAttend,
                fullName: bag.personFullName,
                personGuid: bag.personGuid,
                // TODO JMH Guess at the nick name and last name for now.
                nickName: fullNameParts[0],
                lastName: fullNameParts.slice(1).join(" "),
                // TODO JMH Need to get these things.
                // campusGuid: null,
                // itemTemplate: null,
                // personAliasId: null
            }];
        }
    }

    //#endregion

    //#region Watchers

    watch(config, () => {
        attendanceOccurrenceGuid.value = config.value.attendanceOccurrenceGuid;
        attendanceForDate.value =
            (config.value.attendanceOccurrenceDate && RockDateTime.parseISO(config.value.attendanceOccurrenceDate)?.toASPString(dateFormat.value))
                || RockDateTime.now().toASPString(dateFormat.value);
        attendanceOccurrenceType.value = config.value.selectedAttendanceOccurrenceTypeValue ?? undefined;
        locationGuid.value =  config.value.locationGuid;
        scheduleGuid.value = config.value.scheduleGuid;
        internalDidNotOccur.value =  config.value.isDidNotMeetChecked;
        campusGuid.value = config.value.campusGuid;
        notes.value = config.value.notes ?? "";
    });

    watch([attendanceForDate, locationGuid, scheduleGuid], async () => {
        console.log("in config reload watch");
        attendanceOccurrenceGuid.value = null;

        if (attendanceForDate.value && locationGuid.value && scheduleGuid.value) {
            await getOrCreate();
        }
    });

    watch([attendanceOccurrenceGuid], () => {
        // Turn auto-save off whenever attendance occurrence is changed.
        console.log("auto-save was turned off.");
        autoSaveOff();

        if (attendanceOccurrenceGuid.value) {
            // Wait one tick so the UI can update with the latest config before turning auto-save back on.
            autoSaveOn();
            console.log("auto-save was turned back on.");
        }
    });

    //#endregion

    //#region Real-time

    type TopicListeners = {
        onAttendanceUpdated: (bag: AttendanceUpdatedMessageBag) => void
    };

    type GroupAttendanceTopic = ITopic<ServerFunctions<unknown>> & {
        attendanceOccurrenceGuid: Guid,
        groupGuid: Guid
    };

    async function getGroupAttendanceTopic(groupGuid: Guid, attendanceOccurrenceGuid: Guid): Promise<GroupAttendanceTopic> {
        const topic = await getTopic("Rock.RealTime.Topics.EntityUpdatedTopic");

        await invokeBlockAction("SubscribeToRealTime", { connectionId: topic.connectionId, groupGuid });

        Object.defineProperty(topic, "attendanceOccurrenceGuid", {
            value: attendanceOccurrenceGuid,
            writable: false
        });

        Object.defineProperty(topic, "groupGuid", {
            value: groupGuid,
            writable: false
        });

        return topic as GroupAttendanceTopic;
    }

    async function startRealTime(groupGuid: Guid, attendanceOccurrenceGuid: Guid, listeners: TopicListeners): Promise<GroupAttendanceTopic> {
        const topic = await getGroupAttendanceTopic(groupGuid, attendanceOccurrenceGuid);

        topic.onDisconnected(async () => {
            await autoSaveOn();
        });

        setUpTopicListeners(topic, listeners);

        // Extra logic that needs to happen on every connection goes here.

        // if (!isReconnecting) {
        //     // One time logic goes here.
        // }

        return topic;
    }

    async function stopRealTime(topic: GroupAttendanceTopic): Promise<void> {
        await invokeBlockAction("UnsubscribeFromRealTime", { connectionId: topic.connectionId, groupGuid: topic.groupGuid });
    }

    function setUpTopicListeners(topic: GroupAttendanceTopic, listeners: TopicListeners): void {
        topic.on("attendanceUpdated", listeners.onAttendanceUpdated);
    }

    //#endregion

    if (config.value.attendanceOccurrenceGuid) {
        autoSaveOn();
    }

    onConfigurationValuesChanged(useReloadBlock());
</script>